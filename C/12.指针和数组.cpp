/**
 * 12、指针和数组
 *
 * 	指针和一维数组
 *		一维数组名
 * 			一维数组名是个指针常量
 *			它存放的是一维数组第一个元素的地址
 *
 * 		下标和指针的关系
 *			&a == &a[0]
 *			a的地址等于数组第一个元素的地址
 *			*(数组的地址+1) == 数组的第二个元素
 *
 *		确定一个一维数组需要几个参数
 *          数组的地址以及数组长度
 *
 * 		指针变量的运算
 *          指针变量不能相加、相乘、相除
 *          如果两个指针变量指向的是同一块连续空间中的不同存储单元，则这两个指针变量才可以相减
 *
 *      一个指针变量到底占几个字节
 *          p指向char类型变量(4个字节)
 *          q指向int类型变量(4个字节)
 *          r指向double类型变量(4个字节)
 *          64位编译器就是8位
 *
 * 	指针和二维数组
 */

# include <stdio.h>

/**
 * f函数可以输出任何一个一维数组的内容
 * 1、数组的地址
 * 2、数组的长度
 */
void f(int * pArr, int len)
{
    printf("这是f函数\n");
    //printf("%d\n", *pArr);
    //printf("%d\n", *(pArr+1));

    for (int i = 0; i < len; ++i)
    {
        printf("%d\n", *(pArr+i));
    }
}

int main()
{
    // a是数字名，2是数组元素个数，元素就是变量 a[0] -- a[1]
    int a[2];

    printf("&a = %#X\n", &a);
    printf("&a[0] = %#X\n", &a[0]);
    printf("a[0] = %#X\n", a[0]);
    printf("&a[1] = %#X\n", &a[1]);
    printf("a[1] = %#X\n", a[1]);

    //实例：
    int b[5] = {1,2,3,4,5};
    int c[6] = {-1,2,-100,23,-9,5};
    int d[100] = {111,90,98,-1};

    //printf("b = %#X\n",b);

    f(d,100);

    int * p;
    int * q;

    p = &d[99];
    q = &d[0];

    printf("%d\n", (p - q));
}